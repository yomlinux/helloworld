node {
    withMaven(maven:'M3') {
        stage('Checkout') {
            def scmVars = checkout scm
	        env.IMAGE_TAG = scmVars.GIT_COMMIT[0..6] + '.' + env.BUILD_NUMBER
        }

        stage("Build") {
            withSonarQubeEnv('sonarqube-server') {
                sh 'mvn -s /var/jenkins_home/settings.xml -U clean org.jacoco:jacoco-maven-plugin:prepare-agent package sonar:sonar'
            }
        }
        
        
        stage('Fortify') {

                     dir ('/opt/shared/HPE_Security/Fortify_SCA_and_Apps_17.20/bin')
                     {
                        withCredentials([string(credentialsId: 'appjenkinsST', variable: 'FORTIFY_TOKEN')])
                        {
                          sh './sourceanalyzer -64 -b helloworld -clean'
                          sh './sourceanalyzer -64 -b helloworld ${WORKSPACE}'
                          sh './sourceanalyzer -64 -b helloworld -scan -64 -verbose -Xmx6G -format "fpr" -f ${WORKSPACE}/Assessment.fpr'
                          sh './ReportGenerator -template "DeveloperWorkbook.xml" -format "pdf" -f ${WORKSPACE}/Assessment.pdf -source ${WORKSPACE}/Assessment.fpr'
                          sh './fortifyclient -url http://xxxxxxx:8080/ssc -authtoken ${FORTIFY_TOKEN} -user appjenkinsST uploadFPR -f ${WORKSPACE}/Assessment.fpr -application "helloworld" -applicationVersion "1.0"'
                        }
                     }
                    archiveArtifacts 'Assessment.pdf'
        }
        
/*        
        stage("Quality Gate"){
          timeout(time: 1, unit: 'HOURS') {
            withSonarQubeEnv('sonarqube-server') {
                def qg = waitForQualityGate()

                if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
                }
            }
          }
        }
*/
/*
        stage ('Test Framework') {
          sh '/var/jenkins_home/test_automation/node/bin/node /var/jenkins_home/test_automation/node_modules/selenium-cucumber-js/index.js -s /var/jenkins_home/test_automation/common/step-definitions -f ./test-framework/features -o /var/jenkins_home/test_automation/common/shared-objects -r ./test-framework/reports -b phantomjs'
        }

        stage('Test Results') {
            junit '* * / target/surefire-reports/TEST-*.xml'
            archive 'target/*.jar'
        }
*/
		
        stage('Docker Build') {
            // Run the docker image and push
 		    sh 'mvn -s /var/jenkins_home/settings.xml -DDOCKER_HOST=doi-jenkins.sail.triad.local -DpushImageTags -DdockerImageTags=latest -DdockerImageTags=${IMAGE_TAG} docker:build'           
        }

        stage('Twistlock Scan') {
            twistlockScan ca: '', cert: '', compliancePolicy: 'warn', dockerAddress: 'unix:///var/run/docker.sock', ignoreImageBuildTime: true, image: 'sail-helloworld', key: '', logLevel: 'true', policy: 'warn', requirePackageUpdate: false, timeout: 10
        }

        stage('Twistlock Publish') {
            twistlockPublish ca: '', cert: '', dockerAddress: 'unix:///var/run/docker.sock', ignoreImageBuildTime: true, image: 'sail-helloworld', key: '', logLevel: 'true', timeout: 10
        }

        stage('Docker Push') {
            // Run the docker image and push
            sh 'mvn -s /var/jenkins_home/settings.xml -DDOCKER_HOST=doi-jenkins.sail.triad.local -DpushImageTags -DdockerImageTags=latest -DdockerImageTags=${IMAGE_TAG} docker:push'           
        }
        
        /*
        stage ('Docker Deploy') {
            docker.withTool('docker') {
                docker.withServer('tcp://xxxxxxxxxx:2375', '') {
                    sh "docker stop helloworld || true"
                    sh "docker rm \$(docker ps -a -f=name=helloworld -q) || true"
                    sh "docker rmi \$(docker images -a | awk '\$1 ~ /helloworld/ { print \$3}') || true"
                    sh "docker login -u admin -p admin123 dockerregistry.sail.triad.local"

                    def image = docker.image("nexus/sail-helloworld")
                    def container = image.run("-d --restart=always --name helloworld -p 80:8080")
                }
            }
        }
        */
        
        stage ('k8s Deploy') {
		    wrap([$class: 'KubectlBuildWrapper', caCertificate: '', credentialsId: 'mcrew-kubedev', serverUrl: 'https://kubernetes:6443']) {
		    	sh "sed -i 's/:latest/:${IMAGE_TAG}/g' k8s/deployment.yaml"
	    	    sh "kubectl apply -f k8s/"
	
	    		try {
			  		timeout(time: 5, unit: 'MINUTES') {
	    			    sh "kubectl rollout status deployment/helloworld-deployment"
	    			}
	    		} catch(err) {
	    			sh "kubectl rollout undo deployment/helloworld-deployment"
	    			throw err
	    		}
			}
		}
    }
}
