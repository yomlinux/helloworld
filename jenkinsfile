node {  
   stage('Checkout (Source Code)') {
       def scmVars = checkout scm
       env.IMAGE_TAG = scmVars.GIT_COMMIT[0..6] + '.' + env.BUILD_NUMBER

      env.NEXUS_SERVER = 'IP.ec2.internal'
      env.API_SERVER = 'IP.ec2.internal'
      
      if (env.CLOUD_PROVIDER == 'azure') {
        env.NEXUS_SERVER = 'SERVERe.com'
        env.API_SERVER = 'k8s-SERVER.com'
      }

      if (env.CLOUD_PROVIDER == 'swms') {
        env.NEXUS_SERVER = 'nexus.local'
        env.API_SERVER = 'server.local'
      }
        
       sh "sed -i 's/ip-.ec2.internal/${NEXUS_SERVER}/g' k8s/deployment.yaml"
       sh "sed -i 's/ip-1.ec2.internal/${API_SERVER}/g' src/environments/environment.ts"
       sh "sed -i 's/ip-.ec2.internal/${API_SERVER}/g' src/environments/environment.prod.ts"
    }
    
    stage ('Quality Gate') {
        docker.withTool('docker') {
            docker.withRegistry('https://${NEXUS_SERVER}/', 'nexus-registry') {
              def image = docker.build("joejoe:${IMAGE_TAG}")
               image.push()
            }
        }
    }

    stage ('Build and Test') {
        docker.withTool('docker') {
            docker.withRegistry('https://${NEXUS_SERVER}/', 'nexus-registry') {
              def image = docker.build("joejoe:${IMAGE_TAG}")
               image.push()
            }
        }
    }

    stage ('Deploy - DN') {
      if (env.CLOUD_PROVIDER == 'azure') {
			   wrap([$class: 'KubectlBuildWrapper', caCertificate: '', credentialsId: 'kube-cluster-token', serverUrl: 'https://10.0.0.5:6443']) {
		    	  sh "sed -i 's/:latest/:${IMAGE_TAG}/g' k8s/deployment.yaml"
		    	  sh "kubectl apply -f k8s/"

		    	  try {
				      timeout(time: 180, unit: 'SECONDS') {
		    			   sh "kubectl rollout status deployment/craf-deployment"
		    			}
		    		} catch(err) {
		    			sh "kubectl rollout undo deployment/craf-deployment"
		    			throw err
		    		}
	    	 }
      } else if (env.CLOUD_PROVIDER == 'dnx') {
      
			   wrap([$class: 'KubectlBuildWrapper', caCertificate: '', credentialsId: 'kube-cluster-token', serverUrl: 'https://swms-k8s1.sail.triad.local:6443']) {
		    	  sh "sed -i 's/:latest/:${IMAGE_TAG}/g' k8s/deployment.yaml"
		    	  sh "kubectl apply -f k8s/"

		    	  try {
				      timeout(time: 180, unit: 'SECONDS') {
		    			   sh "kubectl rollout status deployment/jojo-deployment"
		    			}
		    		} catch(err) {
		    			sh "kubectl rollout undo deployment/jojo-deployment"
		    			throw err
		    		}
	    	 }
         
      } else {
        wrap([$class: 'KubectlBuildWrapper', caCertificate: '', credentialsId: 'kube-cluster-token', serverUrl: 'https://IP:6443']) {
           sh "sed -i 's/:latest/:${IMAGE_TAG}/g' k8s/deployment.yaml"
           sh "kubectl apply -f k8s/"

           try {
                timeout(time: 180, unit: 'SECONDS') {
                  sh "kubectl rollout status deployment/jojo-deployment"
               }
           } catch(err) {
             sh "kubectl rollout undo deployment/jojo-deployment"
             throw err
           }
        }
      }
	}

  stage ('Deploy - DNX') {
      if (env.CLOUD_PROVIDER == 'dnx') {
			   wrap([$class: 'KubectlBuildWrapper', caCertificate: '', contextName: 'mycluster', credentialsId: 'kube-cluster-token-icp', serverUrl: 'https://172.16.151.111:8001']) {
		    	  sh "sed -i 's/:latest/:${IMAGE_TAG}/g' k8s/deployment.yaml"
		    	  sh "kubectl --kubeconfig /opt/jenkins/config apply -f k8s/"

		    	  try {
				      timeout(time: 180, unit: 'SECONDS') {
		    			   sh "kubectl --kubeconfig /opt/jenkins/config rollout status deployment/jojo-deployment"
		    			}
		    		} catch(err) {
		    			sh "kubectl --kubeconfig /opt/jenkins/config rollout undo deployment/jojo-deployment"
		    			throw err
		    		}
	    	 }
      }
	}
}
